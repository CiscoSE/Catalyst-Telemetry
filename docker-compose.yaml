version: "3"
services:
  collector:
    container_name: collector
    restart: always
    build:
      context: app-docker
    deploy:
      restart_policy:
        condition: on-failure
    command: python3 /usr/src/app/main.py
    volumes:
      - ./app-code:/usr/src/app
    env_file:
      - .env
    depends_on:
      - influxdb_cli
    networks:
      - webnet
  grafana:
    container_name: ${GRAFANA_HOST}
    restart: always
    image: grafana/grafana
    deploy:
      restart_policy:
        condition: on-failure
    ports:
      - ${GRAFANA_PORT}:${GRAFANA_PORT}
    user: "0"
    env_file:
      - .env
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - webnet
  influxdb:
    container_name: ${INFLUX_HOST}
    restart: always
    image: influxdb
    deploy:
      restart_policy:
        condition: on-failure
    ports:
      - ${INFLUX_PORT}:${INFLUX_PORT}
    volumes:
      - ./influxdb/:/root/.influxdbv2
    env_file:
      - .env
    networks:
      - webnet
  influxdb_cli:
    # Use the influx cli to set up an influxdb instance.
    container_name: influxdb_cli
    links:
      - influxdb
    image: influxdb
    entrypoint: influx setup --bucket ${INFLUX_DNACBUCKET} -t ${INFLUX_TOKEN} -o ${INFLUX_ORG} --username=${INFLUX_USERNAME} --password=${INFLUX_PASSWORD} --host=http://influxdb-datasource:8086 -f
    # Wait for the influxd service in the influxdb container has fully bootstrapped before trying to setup an influxdb instance with the influxdb_cli service.
    restart: on-failure:10
    depends_on:
      - influxdb
    networks:
      - webnet
networks:
  webnet: